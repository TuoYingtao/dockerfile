#user  nobody;
worker_processes  1;

# error_log  /var/log/nginx/error.log;
# error_log  /var/log/nginx/error.log  notice;
# error_log  /var/log/nginx/error.log  info;

#pid        logs/nginx.pid;

events {
    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;   #设置一个进程是否同时接受多个网络连接，默认为off
    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;    #最大连接数，默认为512
}

http {
    include       mime.types;                   #文件扩展名与文件类型映射表
    include       /etc/nginx/conf.d/*.conf;     #导入外部配置
    default_type  application/octet-stream;     #默认文件类型，默认为text/plain

    # 1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；
    # 2.$remote_user ：用来记录客户端用户名称；
    # 3.$time_local ： 用来记录访问时间与时区；
    # 4.$request ： 用来记录请求的url与http协议；
    # 5.$status ： 用来记录请求状态；成功是200；
    # 6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；
    # 7.$http_referer ：用来记录从那个页面链接访问过来的；
    # 8.$http_user_agent ：记录客户端浏览器的相关信息；
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;         #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
    #tcp_nopush     on;

    sendfile_max_chunk 100k;    #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。

    keepalive_timeout  65;      #连接超时时间，默认为75s，可以在http，server，location块。

    root   /etc/nginx/html;
    index  index.html index.htm;

    #proxy_method *;    #支持客户端的请求方法。GET POST ...；
    #proxy_pass http://宿主机IP或域名:端口; #反向代理的地址
    proxy_set_header Host $host; #设置服务地址
    proxy_set_header X-Real-IP $remote_addr; #设置请求头
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #设置请求头
    proxy_set_header X-NginX-Proxy true;
    proxy_http_version 1.0 ; #Nginx服务器提供代理服务的http协议版本1.0，1.1，默认设置为1.0版本
    proxy_read_timeout 1; #nginx服务器想被代理服务器组发出read请求后，等待响应的超时间，默认为60秒。
    proxy_send_timeout 1; #nginx服务器想被代理服务器组发出write请求后，等待响应的超时间，默认为60秒。
    proxy_connect_timeout 1;   #nginx服务器与被代理的服务器建立连接的超时时间，默认60秒
    proxy_ignore_client_abort on;  #客户端断网时，nginx服务器是否终端对被代理服务器的请求。默认为off。
    proxy_ignore_headers "Expires" "Set-Cookie";  #Nginx服务器不处理设置的http相应投中的头域，这里空格隔开可以设置多个。
    proxy_intercept_errors on;    #如果被代理服务器返回的状态码为400或者大于400，设置的error_page配置起作用。默认为off。
    proxy_headers_hash_max_size 1024; #存放http报文头的哈希表容量上限，默认为512个字符。
    proxy_headers_hash_bucket_size 128; #nginx服务器申请存放http报文头的哈希表容量大小。默认为64个字符。
    proxy_next_upstream timeout;  #反向代理upstream中设置的服务器组，出现故障时，被代理服务器返回的状态值。error|timeout|invalid_header|http_500|http_502|http_503|http_504|http_404|off
    proxy_ssl_session_reuse on;  #默认为on，如果我们在错误日志中发现“SSL3_GET_FINSHED:digest check failed”的情况时，可以将该指令设置为off

    gzip  on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    #upstream my_server {
      #keepalive 2000; #启用连接复用 表示最多保持2000个与后端服务器的持久连接 可以减少连接建立和断开的开销，并提高与后端服务器之间的请求响应速度。请根据实际需求和服务器资源进行适当的调整，以平衡性能和资源消耗。
      # weight 均衡负载 为每个服务器设置权重，如果不设置，则默认为1
      # max_fails 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。
      # fail_timeout 在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。
      # backup 热备 预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。
      # down 表示当前的server暂时不参与负载均衡。
      #server 127.23.0.1:9999  weight=2 max_fails=2 fail_timeout=2;
      #server 127.23.0.2:9999  backup;
    #}

    error_page 404 https://www.runnob.com; #错误页

    server {
        listen       80;
        server_name  localhost;
        keepalive_requests 120; #单连接请求上限次数。
        # 存放密码文件的路径
        auth_basic_user_file /etc/nginx/htpasswd;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            try_files $uri $uri.html $uri/ index.html;
        }

        #error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
